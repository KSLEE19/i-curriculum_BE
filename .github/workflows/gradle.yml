# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 소스 코드 체크아웃
      - name: Checkout source code.
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # not executable 에러로 권한 부여 해줌
      - name: Run chomod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # 의존성 설치
      - name: Install dependencies
        run: npm install

      # .env 파일 생성
      - name: create env file
        working-directory: ./
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          
      # 파일 및 폴더를 압축하여 server.zip으로 저장
      - name: zip distributions
        run: zip -r server.zip .

      # AWS 인증 정보 설정
      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
          
      # S3로 압축 파일 업로드
      - name: upload to S3
        run: aws s3 cp --region ap-southeast-1 ./server.zip s3://${{secrets.BUCKET_NAME}}/public/

      # AWS CodeDeploy를 사용하여 배포
      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name ${{secrets.CODEDEPLOY_APP_NAME}}
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name ${{secrets.CODEDEPLOY_DG_NAME}}
          --s3-location bucket=${{secrets.BUCKET_NAME}},bundleType=zip,key=public/server.zip
